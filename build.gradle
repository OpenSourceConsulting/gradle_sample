apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'

sourceCompatibility = 1.7
version = '1.0'

project.ext {
	// 의존성 설정에 사용할 프로퍼티
	springVersion = '3.2.6.RELEASE'
	slf4jVersion = '1.7.5'
}

sourceSets {
    main {
    	// default 값은 build/classes/main, build/resources/main
	    output.classesDir = 'build/classes'
	    output.resourcesDir = 'build/classes'
    }
    test {
    	// default 값은 build/classes/test, build/resources/test
	    output.classesDir = 'build/test-classes'
	    output.resourcesDir = 'build/test-classes'
    }
}

repositories {
    mavenCentral()
}

// 의존성 설정
dependencies {
	compile "org.springframework:spring-aop:$springVersion", "org.springframework:spring-beans:$springVersion", "org.springframework:spring-context:$springVersion", 
			"org.springframework:spring-core:$springVersion", "org.springframework:spring-jdbc:$springVersion", "org.springframework:spring-orm:$springVersion", 
			"org.springframework:spring-tx:$springVersion", "org.springframework:spring-oxm:$springVersion", 
			"org.springframework:spring-web:$springVersion", "org.springframework:spring-webmvc:$springVersion"
	compile	"org.mybatis:mybatis:3.2.3", "org.mybatis:mybatis-spring:1.2.1"
	compile	"javax.validation:validation-api:1.0.0.GA", "org.hibernate:hibernate-validator:4.3.0.Final"
	compile	"org.aspectj:aspectjweaver:1.7.4", "org.aspectj:aspectjrt:1.7.4"
	compile	"commons-lang:commons-lang:2.6","commons-io:commons-io:2.4", "commons-fileupload:commons-fileupload:1.3"
	compile	"javax.ws.rs:jsr311-api:1.1.1", "javax.servlet:jstl:1.2", "taglibs:standard:1.1.2"
	compile	"org.slf4j:slf4j-api:$slf4jVersion","org.slf4j:jcl-over-slf4j:$slf4jVersion","org.slf4j:slf4j-log4j12:$slf4jVersion"
	compile	"org.codehaus.jackson:jackson-core-asl:1.9.8", "org.codehaus.jackson:jackson-mapper-asl:1.9.8"
	compile	"hsqldb:hsqldb:1.8.0.10"
	providedCompile "javax.servlet:javax.servlet-api:3.0.1"
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "junit:junit:4.+"
    testCompile "com.sun.jersey:jersey-core:1.12", "com.sun.jersey:jersey-client:1.12", "com.jayway.jsonpath:json-path-assert:0.8.1"
}


// 모든 의존성에서 commons-logging는 제외
[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')

// JAVA 컴파일시 인코딩 설정
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// TEST 설정
test {
    jvmArgs = ['-ea', '-Xmx256m']
    logging.captureStandardOutput(LogLevel.INFO)
    reports.html.enabled = true  // getReports().getHtml().setEnabled(true)
}

// 테스트 task 수행 시 classpath를 확인하기 위해 삽입
testClasses.doFirst {
	println "Test classpath is : "
	sourceSets.test.runtimeClasspath.getFiles().each { file ->
		println "file: \"" + file + "\""
	}
}

// src/main/java에 위치한 non java 파일을 output 디렉토리로 복사
processResources {
	from('src/main/java') {
        exclude '**/*.java'
    }

    into 'build/classes'
    includeEmptyDirs = true
}

// src/test/java에 위치한 non java 파일을 output 디렉토리로 복사
processTestResources {
	from('src/test/java') {
        exclude '**/*.java'
    }
    
    into 'build/test-classes'
    includeEmptyDirs = true
}

// 프로젝트 초기화
// 1. java source directory 생성 : src/main/java, src/test/java
// 2. resource directory 생성    : src/main/resource, src/test/resource
// 3. web source directory 생성  : src/main/webapp, src/main/webapp/WEB-INF
task initProject(description: 'initialize project') << {
    def createDir = {
        println "create source directory: $it"
        it.mkdirs()
    }
    sourceSets*.java.srcDirs*.each createDir
    sourceSets*.resources.srcDirs*.each createDir
    createDir webAppDir
    createDir new File(webAppDir, '/WEB-INF')
}

eclipse {
    classpath {
        defaultOutputDir = file("build/classes")

		// src/test/java, src/test/resources의 output 디렉토리를 지정한다.
        file {
            whenMerged { cp ->
                cp.entries.findAll{ entry ->
                    entry.kind == 'src' && entry.path.startsWith("src/test/")
                }*.output = "build/test-classes" 
            }
        }
    }
    
    wtp {
        component {
        	// 원하는 contextPath 지정. 단, 빈 컨텍스트패스는 '/' 로 지정
            contextPath = project.name 
        }
        facet {
        	// Servlet Spec Version 지정
            facet name: 'jst.web', version: '3.0'
            // Java Version 지정, 1.7
            facet name: 'jst.java', version: '1.7'
            // Javascript 지정, 1.0
            facet name: 'wst.jsdt.web', version: '1.0'
        }
    }
}